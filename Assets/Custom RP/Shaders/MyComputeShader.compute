// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpdateParticle

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// RWTexture2D<float4> Result;

//用于存储粒子的结构体
struct ParticleData
{
    float3 pos;
    float4 color;
};

//将粒子用List一样的东西来存储
//RWStructuredBuffer是一个可读写的Buffer，并且它支持我们自定义的struct类型，不局限于int/float
RWStructuredBuffer<ParticleData>ParticleBuffer;

//为了实现动态粒子效果，增加时间值
float Time;

[numthreads(10, 10, 10)]
void UpdateParticle(uint3 gid : SV_GroupID, uint index : SV_GroupIndex)
{
    int pindex = gid.x * 1000 + index;

    float x = sin(index);
    float y = sin(index * 1.2f);
    float3 forward = float3(x, y, -sqrt(1 - x * x - y * y));
    ParticleBuffer[pindex].color = float4(forward.x, forward.y, cos(index) * 0.5f + 0.5, 1);
    if (Time > gid.x)
        ParticleBuffer[pindex].pos += forward * 0.005f;
}
